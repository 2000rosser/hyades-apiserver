package org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage;


import io.minio.MakeBucketArgs;
import io.minio.PutObjectArgs;
import io.minio.errors.ErrorResponseException;
import io.minio.errors.InsufficientDataException;
import io.minio.errors.InternalException;
import io.minio.errors.InvalidResponseException;
import io.minio.errors.ServerException;
import io.minio.errors.XmlParserException;
import org.dependencytrack.PersistenceCapableTest;
import org.dependencytrack.tasks.vulnerabilitypolicy.S3Client;
import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.EnvironmentVariables;
import org.junit.jupiter.api.Assertions;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.NoSuchElementException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public class S3StorageHandlerTest extends PersistenceCapableTest {


    private static final String ACCESS_KEY = "MINIO_ACCESS_KEY";
    private static final String SECRET_KEY = "MINIO_SECRET_KEY";
    MinioContainer minioContainer;
    S3StorageHandler s3StorageHandler;

    @Rule
    public EnvironmentVariables environmentVariables = new EnvironmentVariables();

    @Before
    public void beforeTest() {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "s3");
        minioContainer = new MinioContainer(
                new MinioContainer.CredentialsProvider(ACCESS_KEY, SECRET_KEY));
        minioContainer.start();

    }

    @After
    public void afterTest() {
        environmentVariables.clear("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE");
        minioContainer.stop();
    }

    @Test
    public void testVerifyDownloadNeededBucketDoesNotExist() throws IOException, ServerException, InsufficientDataException,
            ErrorResponseException, NoSuchAlgorithmException, InvalidKeyException, InvalidResponseException,
            XmlParserException, InternalException {
        S3Client s3Client = new S3Client("http://" + minioContainer.getHostAddress(),
                "test.zip", "MINIO_ACCESS_KEY", "MINIO_SECRET_KEY", "testbucket", null);
        s3StorageHandler = new S3StorageHandler(s3Client);
        Assertions.assertThrows(NoSuchElementException.class, s3StorageHandler::verifyDownloadNeeded);
    }

    @Test
    public void testVerifyDownloadNeededBucketExist() throws IOException, ServerException, InsufficientDataException,
            ErrorResponseException, NoSuchAlgorithmException, InvalidKeyException, InvalidResponseException,
            XmlParserException, InternalException {
        S3Client s3Client = new S3Client("http://" + minioContainer.getHostAddress(),
                "test.zip", "MINIO_ACCESS_KEY", "MINIO_SECRET_KEY", "testbucket", null);

        Path path = Paths.get("src/test/resources/unit/tasks/vulnerabilitypolicy/test.zip");
        byte[] arr = Files.readAllBytes(path);
        s3Client.getMinioClient().makeBucket(MakeBucketArgs.builder().bucket("testbucket").build());
        s3Client.getMinioClient().putObject(PutObjectArgs.builder().bucket("testbucket").
                object("test.zip").stream(new ByteArrayInputStream(arr), -1, 10485760).build());
        s3StorageHandler = new S3StorageHandler(s3Client);
        Assertions.assertTrue(s3StorageHandler.verifyDownloadNeeded());
    }

    @Test
    public void testDownload() throws IOException, ServerException, InsufficientDataException,
            ErrorResponseException, NoSuchAlgorithmException, InvalidKeyException, InvalidResponseException,
            XmlParserException, InternalException {
        S3Client s3Client = new S3Client("http://" + minioContainer.getHostAddress(),
                "test.zip", "MINIO_ACCESS_KEY", "MINIO_SECRET_KEY", "testbucket", null);
        Path path = Paths.get("src/test/resources/unit/tasks/vulnerabilitypolicy/test.zip");
        byte[] arr = Files.readAllBytes(path);
        s3Client.getMinioClient().makeBucket(MakeBucketArgs.builder().bucket("testbucket").build());
        s3Client.getMinioClient().putObject(PutObjectArgs.builder().bucket("testbucket").
                object("test.zip").stream(new ByteArrayInputStream(arr), -1, 10485760).build());
        s3StorageHandler = new S3StorageHandler(s3Client);
        ArrayList<ZipEntry> zipEntries;
        try (ZipInputStream zipInputStream = s3StorageHandler.downloadZippedContent()) {
            ZipEntry zipEntry = zipInputStream.getNextEntry();
            zipEntries = new ArrayList<>();
            while (zipEntry != null) {
                if (!(zipEntry.getName().startsWith(".") || zipEntry.getName().startsWith("_")) && (zipEntry.getName().contains(".yaml") || zipEntry.getName().contains(".yml"))) {
                    zipEntries.add(zipEntry);
                }
                zipEntry = zipInputStream.getNextEntry();
            }
        }
        Assertions.assertTrue(zipEntries.size() > 0);
        Assertions.assertEquals("test/sample 2.yaml", zipEntries.get(0).getName());
    }
}
