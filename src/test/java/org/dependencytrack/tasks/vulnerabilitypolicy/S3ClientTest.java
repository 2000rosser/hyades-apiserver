package org.dependencytrack.tasks.vulnerabilitypolicy;

import io.minio.MinioClient;
import io.minio.errors.ErrorResponseException;
import io.minio.errors.InsufficientDataException;
import io.minio.errors.InternalException;
import io.minio.errors.InvalidResponseException;
import io.minio.errors.ServerException;
import io.minio.errors.XmlParserException;
import org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage.MinioContainer;
import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.EnvironmentVariables;
import org.junit.jupiter.api.Assertions;

import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

public class S3ClientTest {

    private static final String ACCESS_KEY = "MINIO_ACCESS_KEY";
    private static final String SECRET_KEY = "MINIO_SECRET_KEY";
    MinioContainer minioContainer;

    @Rule
    public EnvironmentVariables environmentVariables = new EnvironmentVariables();

    @Before
    public void beforeTest() {
        minioContainer = new MinioContainer(
                new MinioContainer.CredentialsProvider(ACCESS_KEY, SECRET_KEY));
        minioContainer.start();

    }

    @After
    public void afterTest() {
        environmentVariables.clear("VULNERABILITY_POLICY_ANALYSIS_ENABLED",
                "VULNERABILITY_POLICY_FETCH_SOURCE_NAME", "VULNERABILITY_POLICY_FETCH_URL",
                "VULNERABILITY_POLICY_S3_FILE_NAME", "VULNERABILITY_POLICY_S3_ACCESS_KEY",
                "VULNERABILITY_POLICY_S3_SECRET_KEY", "VULNERABILITY_POLICY_S3_BUCKET_NAME");
    }

    @Test
    public void testS3Client() throws ServerException, InsufficientDataException, ErrorResponseException, IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidResponseException, XmlParserException, InternalException {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_FETCH_SOURCE_NAME", "s3");
        environmentVariables.set("VULNERABILITY_POLICY_FETCH_URL", "http://" + minioContainer.getHostAddress());
        environmentVariables.set("VULNERABILITY_POLICY_S3_FILE_NAME", "test.zip");
        environmentVariables.set("VULNERABILITY_POLICY_S3_ACCESS_KEY", "MINIO_ACCESS_KEY");
        environmentVariables.set("VULNERABILITY_POLICY_S3_SECRET_KEY", "MINIO_SECRET_KEY");
        environmentVariables.set("VULNERABILITY_POLICY_S3_BUCKET_NAME", "testbucket");
        environmentVariables.set("VULNERABILITY_POLICY_S3_REGION", "nam");
        S3Client s3Client = new S3Client();
        MinioClient client = s3Client.getMinioClient();
        String bundleToFetch = s3Client.getBundleToFetch();
        Assertions.assertEquals("testbucket", s3Client.getS3BucketName());
        Assertions.assertEquals(0, client.listBuckets().size());
        Assertions.assertEquals("test.zip", bundleToFetch);
    }
}
