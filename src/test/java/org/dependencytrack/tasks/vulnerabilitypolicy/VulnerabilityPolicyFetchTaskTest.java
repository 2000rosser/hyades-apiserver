package org.dependencytrack.tasks.vulnerabilitypolicy;

import com.github.tomakehurst.wiremock.client.WireMock;
import com.github.tomakehurst.wiremock.junit.WireMockRule;
import org.apache.commons.io.IOUtils;
import org.apache.http.HttpStatus;
import org.dependencytrack.AbstractPostgresEnabledTest;
import org.dependencytrack.event.VulnerabilityPolicyFetchEvent;
import org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage.BlobStorageAccessFactory;
import org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage.BlobStorageAccessHandler;
import org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage.NginxStorageHandler;
import org.junit.After;
import org.junit.Rule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.EnvironmentVariables;
import org.junit.jupiter.api.Assertions;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import javax.naming.OperationNotSupportedException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.StringReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
import static org.apache.commons.io.IOUtils.resourceToByteArray;
import static org.assertj.core.api.Assertions.assertThat;

public class VulnerabilityPolicyFetchTaskTest extends AbstractPostgresEnabledTest {

    @Rule
    public EnvironmentVariables environmentVariables = new EnvironmentVariables();

    @Rule
    public WireMockRule wireMockRule = new WireMockRule(options().dynamicPort());

    private static MockedStatic<BlobStorageAccessFactory> blobStorageAccessFactory;

    @After
    public void afterTest() {
        environmentVariables.clear("VULNERABILITY_POLICY_ANALYSIS_ENABLED"
                , "VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE");
    }

    @Test
    public void testInform() throws Exception {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        BlobStorageAccessHandler handler = Mockito.mock(NginxStorageHandler.class);
        blobStorageAccessFactory = Mockito.mockStatic(BlobStorageAccessFactory.class);
        blobStorageAccessFactory.when(BlobStorageAccessFactory::createStorageHandler).thenReturn(handler);
        Mockito.when(handler.verifyDownloadNeeded()).thenReturn(false);
        new VulnerabilityPolicyFetchTask(handler).inform(new VulnerabilityPolicyFetchEvent());
        final ZipInputStream zipInputStream = Mockito.verify(handler, Mockito.never()).downloadZippedContent();
        blobStorageAccessFactory.close();

    }

    @Test
    public void testInformPolicyAnalysisNotEnabled() throws Exception {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "false");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        BlobStorageAccessHandler handler = Mockito.mock(NginxStorageHandler.class);
        blobStorageAccessFactory = Mockito.mockStatic(BlobStorageAccessFactory.class);
        blobStorageAccessFactory.when(BlobStorageAccessFactory::createStorageHandler).thenReturn(handler);
        Mockito.when(handler.verifyDownloadNeeded()).thenReturn(false);
        new VulnerabilityPolicyFetchTask(handler).inform(new VulnerabilityPolicyFetchEvent());
        final ZipInputStream zipInputStream = Mockito.verify(handler, Mockito.never()).downloadZippedContent();
        Mockito.verify(handler, Mockito.never()).verifyDownloadNeeded();
        blobStorageAccessFactory.close();

    }

    @Test
    public void testInformIOException() throws Exception {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        BlobStorageAccessHandler handler = Mockito.mock(NginxStorageHandler.class);
        blobStorageAccessFactory = Mockito.mockStatic(BlobStorageAccessFactory.class);
        blobStorageAccessFactory.when(BlobStorageAccessFactory::createStorageHandler).thenReturn(handler);
        final ZipInputStream zipInputStream = Mockito.doThrow(IOException.class).when(handler).downloadZippedContent();
        new VulnerabilityPolicyFetchTask(handler).inform(new VulnerabilityPolicyFetchEvent());
        final ZipInputStream zipInputStream1 = Mockito.verify(handler, Mockito.times(0)).downloadZippedContent();
        Mockito.verify(handler, Mockito.times(1)).verifyDownloadNeeded();
        blobStorageAccessFactory.close();

    }

    @Test
    public void testInformSuccess() throws IOException, OperationNotSupportedException {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_URL", wireMockRule.baseUrl() + "/bundles/test.zip");
        WireMock.stubFor(WireMock.head(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse().withStatus(HttpStatus.SC_OK)
                        .withHeader("ETag", "65708810-3a5")));
        WireMock.stubFor(WireMock.get(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse().withBody(java.nio.file.Files.readAllBytes(Paths.get("src/test/resources/unit/tasks/vulnerabilitypolicy/test.zip")))
                        .withStatus(HttpStatus.SC_OK)));
        new VulnerabilityPolicyFetchTask().inform(new VulnerabilityPolicyFetchEvent());
        Assertions.assertEquals(2, qm.getAllVulnerabilityPolicies().size());
    }

    @Test
    public void testInformParseFailure() throws IOException, OperationNotSupportedException {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_URL", wireMockRule.baseUrl() + "/bundles/test.zip");
        WireMock.stubFor(WireMock.head(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse().withStatus(HttpStatus.SC_OK)
                        .withHeader("ETag", "65708810-3a5")));
        WireMock.stubFor(WireMock.get(WireMock.urlPathMatching("/bundles/test.zip"))
                .willReturn(WireMock.aResponse().withBody(java.nio.file.Files.readAllBytes(Paths.get("src/test/resources/unit/tasks/vulnerabilitypolicy/test.zip")))
                        .withStatus(HttpStatus.SC_OK)));
        new VulnerabilityPolicyFetchTask().inform(new VulnerabilityPolicyFetchEvent());
        Assertions.assertEquals(2, qm.getAllVulnerabilityPolicies().size());
    }

    @Test
    public void invalidPolicyConditionTest() throws Exception {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_URL", wireMockRule.baseUrl() + "/bundles/sampleInvalid.yaml.zip");
        WireMock.stubFor(WireMock.head(WireMock.urlPathMatching("/bundles/sampleInvalid.yaml.zip"))
                .willReturn(WireMock.aResponse().withStatus(HttpStatus.SC_OK)
                        .withHeader("ETag", "65708810-3a5")));
        BlobStorageAccessHandler nginxStorageHandler = new NginxStorageHandler();
        WireMock.stubFor(WireMock.get(WireMock.urlPathMatching("/bundles/sampleInvalid.yaml.zip"))
                .willReturn(WireMock.aResponse().withBody(resourceToByteArray("/unit/tasks/vulnerabilitypolicy/sampleInvalid.yaml.zip"))
                        .withStatus(HttpStatus.SC_OK)));
        new VulnerabilityPolicyFetchTask(nginxStorageHandler).inform(new VulnerabilityPolicyFetchEvent());
        WireMock.verify(WireMock.headRequestedFor(WireMock.urlPathEqualTo("/bundles/sampleInvalid.yaml.zip")));
        WireMock.verify(WireMock.getRequestedFor(WireMock.urlPathEqualTo("/bundles/sampleInvalid.yaml.zip")));
        assertThat(qm.getAllVulnerabilityPolicies()).isEmpty();
    }

    @Test
    public void testInformWithOneValidAndOneInvalidPolicy() throws Exception {
        environmentVariables.set("VULNERABILITY_POLICY_ANALYSIS_ENABLED", "true");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_SOURCE_TYPE", "NGINX");
        environmentVariables.set("VULNERABILITY_POLICY_BUNDLE_URL", wireMockRule.url("/bundles/bundle.zip"));

        final Path bundlePath = Files.createTempFile("hyades-apiserver-%s".formatted(getClass().getSimpleName()), ".zip");
        try (final OutputStream fileOutputStream = Files.newOutputStream(bundlePath);
             final var zipOutputStream = new ZipOutputStream(fileOutputStream)) {
            zipOutputStream.putNextEntry(new ZipEntry("valid.yml"));
            IOUtils.copy(new StringReader("""
                    apiVersion: v1.0
                    type: Vulnerability Policy
                    name: Valid
                    conditions:
                    - component.name == "foo"
                    analysis:
                      state: IN_TRIAGE
                    """), zipOutputStream, StandardCharsets.UTF_8);

            zipOutputStream.putNextEntry(new ZipEntry("invalid.yml"));
            IOUtils.copy(new StringReader("""
                    apiVersion: v1.0
                    type: Some Other Policy
                    name: Invalid
                    conditions: { }
                    """), zipOutputStream, StandardCharsets.UTF_8);
        }

        WireMock.stubFor(WireMock.head(WireMock.urlPathEqualTo("/bundles/bundle.zip"))
                .willReturn(WireMock.aResponse()
                        .withStatus(200)
                        .withHeader("ETag", "65708810-3a5")));
        WireMock.stubFor(WireMock.get(WireMock.urlPathEqualTo("/bundles/bundle.zip"))
                .willReturn(WireMock.aResponse()
                        .withStatus(200)
                        .withBody(Files.readAllBytes(bundlePath))));

        new VulnerabilityPolicyFetchTask(new NginxStorageHandler()).inform(new VulnerabilityPolicyFetchEvent());

        WireMock.verify(WireMock.headRequestedFor(WireMock.urlPathEqualTo("/bundles/bundle.zip")));
        WireMock.verify(WireMock.getRequestedFor(WireMock.urlPathEqualTo("/bundles/bundle.zip")));

        assertThat(qm.getAllVulnerabilityPolicies()).isEmpty();
    }

}
