package org.dependencytrack.event;

import org.dependencytrack.model.Component;
import org.dependencytrack.model.VulnerabilityAnalysisLevel;
import org.junit.Test;

import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatExceptionOfType;

public class ComponentVulnerabilityAnalysisEventTest {

    @Test
    public void testConstructor() {
        final var token = UUID.randomUUID();
        final var component = new Component();

        final var event = new ComponentVulnerabilityAnalysisEvent(token,
                component, VulnerabilityAnalysisLevel.BOM_UPLOAD_ANALYSIS);

        assertThat(event.token()).isEqualTo(token);
        assertThat(event.component()).isEqualTo(component);
        assertThat(event.level()).isEqualTo(VulnerabilityAnalysisLevel.BOM_UPLOAD_ANALYSIS);
    }

    @Test
    public void testConstructorWhenRequiredParameterIsNull() {
        assertThatExceptionOfType(NullPointerException.class)
                .isThrownBy(() -> new ComponentVulnerabilityAnalysisEvent(null,
                        new Component(), VulnerabilityAnalysisLevel.BOM_UPLOAD_ANALYSIS));
        assertThatExceptionOfType(NullPointerException.class)
                .isThrownBy(() -> new ComponentVulnerabilityAnalysisEvent(UUID.randomUUID(),
                        null, VulnerabilityAnalysisLevel.BOM_UPLOAD_ANALYSIS));
        assertThatExceptionOfType(NullPointerException.class)
                .isThrownBy(() -> new ComponentVulnerabilityAnalysisEvent(UUID.randomUUID(),
                        new Component(), null));
    }

}