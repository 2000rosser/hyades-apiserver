/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.persistence;

import alpine.common.logging.Logger;
import alpine.persistence.PaginatedResult;
import alpine.resources.AlpineRequest;
import org.apache.commons.lang3.StringUtils;
import org.dependencytrack.model.Project;
import org.dependencytrack.model.Tag;
import org.dependencytrack.model.Vulnerability;
import org.dependencytrack.model.VulnerabilityTag;

import javax.jdo.PersistenceManager;
import javax.jdo.Query;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Stream;

public class VulnerabilityTagQueryManager extends QueryManager implements IQueryManager {

    private static final Comparator<VulnerabilityTag> TAG_COMPARATOR = Comparator.comparingInt(
            (VulnerabilityTag tag) -> tag.getVulnerabilities().size()).reversed();

    private static final Logger LOGGER = Logger.getLogger(VulnerabilityTagQueryManager.class);

    /**
     * Constructs a new QueryManager.
     * @param pm a PersistenceManager object
     */
    VulnerabilityTagQueryManager(final PersistenceManager pm) {
        super(pm);
    }

    /**
     * Constructs a new QueryManager.
     * @param pm a PersistenceManager object
     * @param request an AlpineRequest object
     */
    VulnerabilityTagQueryManager(final PersistenceManager pm, final AlpineRequest request) {
        super(pm, request);
    }

    public PaginatedResult getAllVulnerabilityTags() {

        LOGGER.debug("Retrieving all vulnerability tags");
        final Stream<VulnerabilityTag> tags;
        tags = pm.newQuery(VulnerabilityTag.class).executeList().stream();
        List<VulnerabilityTag> tagsToShow = tags.sorted(TAG_COMPARATOR).toList();

        return (new PaginatedResult()).objects(tagsToShow).total(tagsToShow.size());
    }

    /**
     * Returns a list of VulnerabilityTag objects what have been resolved. It resolved
     * tags by querying the database to retrieve the tag. If the tag does
     * not exist, the tag will be created and returned with other resolved
     * tags.
     *
     * @param tags a List of VulnerabilityTag to resolve
     * @return List of resolved VulnerabilityTag
     */
    public synchronized List<VulnerabilityTag> resolveVulnerabilityTags(final List<VulnerabilityTag> tags) {
        if (tags == null) {
            return new ArrayList<>();
        }
        final List<VulnerabilityTag> resolvedTags = new ArrayList<>();
        final List<String> unresolvedTags = new ArrayList<>();
        for (final VulnerabilityTag tag : tags) {
            final String trimmedTag = StringUtils.trimToNull(tag.getName());
            if (trimmedTag != null) {
                final VulnerabilityTag resolvedTag = getVulnerabilityTagByName(trimmedTag);
                if (resolvedTag != null) {
                    resolvedTags.add(resolvedTag);
                } else {
                    unresolvedTags.add(trimmedTag);
                }
            }
        }
        resolvedTags.addAll(createVulnerabilityTags(unresolvedTags));
        return resolvedTags;
    }

    /**
     * Returns a list of VulnerabilityTag objects by name.
     *
     * @param name the name of the VulnerabilityTag
     * @return a VulnerabilityTag object
     */
    public VulnerabilityTag getVulnerabilityTagByName(final String name) {
        final String loweredTrimmedTag = StringUtils.lowerCase(StringUtils.trimToNull(name));
        final Query<VulnerabilityTag> query = pm.newQuery(VulnerabilityTag.class, "name == :name");
        query.setRange(0, 1);
        return singleResult(query.execute(loweredTrimmedTag));
    }

    /**
     * Creates one or more VulnerabilityTag objects from the specified name(s).
     *
     * @param names the name(s) of the VulnerabilityTag(s) to create
     * @return the created VulnerabilityTag object(s)
     */
    private List<VulnerabilityTag> createVulnerabilityTags(final List<String> names) {
        final List<VulnerabilityTag> newTags = new ArrayList<>();
        for (final String name : names) {
            final String loweredTrimmedTag = StringUtils.lowerCase(StringUtils.trimToNull(name));
            if (getVulnerabilityTagByName(loweredTrimmedTag) == null) {
                final VulnerabilityTag tag = new VulnerabilityTag();
                tag.setName(loweredTrimmedTag);
                newTags.add(tag);
            }
        }
        return new ArrayList<>(persist(newTags));
    }

    /**
     * Binds the two objects together in a corresponding join table.
     *
     * @param vulnerability a Vulnerability object
     * @param tags    a List of VulnerabilityTag objects
     */
    @SuppressWarnings("unchecked")
    public void bindTagsToVulnerability(Vulnerability vulnerability, List<VulnerabilityTag> tags) {
        final Query<VulnerabilityTag> query = pm.newQuery(VulnerabilityTag.class, "vulnerabilities.contains(:vulnerability)");
        final List<VulnerabilityTag> currentVulnerabilityTags = (List<VulnerabilityTag>) query.execute(vulnerability);
        pm.currentTransaction().begin();
        for (final VulnerabilityTag tag : currentVulnerabilityTags) {
            if (!tags.contains(tag)) {
                tag.getVulnerabilities().remove(vulnerability);
            }
        }
        vulnerability.setVulnerabilityTags(tags);
        for (final VulnerabilityTag tag : tags) {
            final List<Vulnerability> vulnerabilities = tag.getVulnerabilities();
            if (!vulnerabilities.contains(vulnerability)) {
                vulnerabilities.add(vulnerability);
            }
        }
        pm.currentTransaction().commit();
    }
}
