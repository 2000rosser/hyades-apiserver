package org.dependencytrack.event.kafka.processor;

import alpine.common.logging.Logger;
import alpine.event.framework.Event;
import com.github.packageurl.MalformedPackageURLException;
import com.github.packageurl.PackageURL;
import org.apache.kafka.common.header.Header;
import org.apache.kafka.streams.processor.api.Processor;
import org.apache.kafka.streams.processor.api.Record;
import org.cyclonedx.model.Bom;
import org.dependencytrack.event.IndexEvent;
import org.dependencytrack.event.kafka.dto.AnalyzerCompletionStatus;
import org.dependencytrack.event.kafka.dto.AnalyzerConfig;
import org.dependencytrack.event.kafka.dto.VulnerabilityResult;
import org.dependencytrack.model.Component;
import org.dependencytrack.model.Cwe;
import org.dependencytrack.model.Severity;
import org.dependencytrack.model.Vulnerability;
import org.dependencytrack.model.VulnerabilityAlias;
import org.dependencytrack.model.VulnerabilityAnalysisLevel;
import org.dependencytrack.model.VulnerableSoftware;
import org.dependencytrack.parser.common.resolver.CweResolver;
import org.dependencytrack.parser.osv.model.OsvAdvisory;
import org.dependencytrack.parser.osv.model.OsvAffectedPackage;
import org.dependencytrack.persistence.QueryManager;
import org.dependencytrack.util.AnalyzerCompletionTracker;
import org.dependencytrack.util.NotificationUtil;
import us.springett.cvss.Cvss;
import us.springett.cvss.Score;

import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import static org.dependencytrack.model.Severity.getSeverityByLevel;
import static org.dependencytrack.util.VulnerabilityUtil.normalizedCvssV2Score;
import static org.dependencytrack.util.VulnerabilityUtil.normalizedCvssV3Score;

public class MirrorVulnerabilityProcessor implements Processor<String, Bom, Void, Void> {

    private static final Logger LOGGER = Logger.getLogger(ComponentAnalyzerConfigProcessor.class);
    @Override
    public void process(final Record<String, Bom> record) {
        try (QueryManager qm = new QueryManager()) {

            LOGGER.debug("Synchronizing Google OSV advisory: " + record.key());
            Bom bom = record.value();
            final Vulnerability vulnerability = mapBomToVulnerability(qm, bom);
            final List<VulnerableSoftware> vsListOld = qm.detach(qm.getVulnerableSoftwareByVulnId(vulnerability.getSource(), vulnerability.getVulnId()));
            final Vulnerability synchronizedVulnerability = qm.synchronizeVulnerability(vulnerability, false);
            org.cyclonedx.model.vulnerability.Vulnerability cycloneVuln = bom.getVulnerabilities().get(0);
            if (cycloneVuln.getReferences() != null) {
                for (int i = 0; i < cycloneVuln.getReferences().size(); i++) {
                    final String alias = cycloneVuln.getReferences().get(i).getId();
                    final VulnerabilityAlias vulnerabilityAlias = new VulnerabilityAlias();

                    // OSV will use IDs of other vulnerability databases for its
                    // primary advisory ID (e.g. GHSA-45hx-wfhj-473x). We need to ensure
                    // that we don't falsely report GHSA IDs as stemming from OSV.
                    final Vulnerability.Source advisorySource = extractSource(cycloneVuln.getId());
                    switch (advisorySource) {
                        case NVD -> vulnerabilityAlias.setCveId(cycloneVuln.getId());
                        case GITHUB -> vulnerabilityAlias.setGhsaId(cycloneVuln.getId());
                        default -> vulnerabilityAlias.setOsvId(cycloneVuln.getId());
                    }

                    if (alias.startsWith("CVE") && Vulnerability.Source.NVD != advisorySource) {
                        vulnerabilityAlias.setCveId(alias);
                        qm.synchronizeVulnerabilityAlias(vulnerabilityAlias);
                    } else if (alias.startsWith("GHSA") && Vulnerability.Source.GITHUB != advisorySource) {
                        vulnerabilityAlias.setGhsaId(alias);
                        qm.synchronizeVulnerabilityAlias(vulnerabilityAlias);
                    }

                    //TODO - OSV supports GSD and DLA/DSA identifiers (possibly others). Determine how to handle.
                }
            }

            List<VulnerableSoftware> vsList = new ArrayList<>();
            for (OsvAffectedPackage osvAffectedPackage : advisory.getAffectedPackages()) {
                VulnerableSoftware vs = mapAffectedPackageToVulnerableSoftware(qm, osvAffectedPackage);
                if (vs != null) {
                    vsList.add(vs);
                }
            }
            qm.persist(vsList);
            qm.updateAffectedVersionAttributions(synchronizedVulnerability, vsList, Vulnerability.Source.OSV);
            vsList = qm.reconcileVulnerableSoftware(synchronizedVulnerability, vsListOld, vsList, Vulnerability.Source.OSV);
            synchronizedVulnerability.setVulnerableSoftware(vsList);
            qm.persist(synchronizedVulnerability);
        }
        Event.dispatch(new IndexEvent(IndexEvent.Action.COMMIT, Vulnerability.class));

    }

    public VulnerableSoftware mapAffectedPackageToVulnerableSoftware(final QueryManager qm, final OsvAffectedPackage affectedPackage) {
        if (affectedPackage.getPurl() == null) {
            LOGGER.debug("No PURL provided for affected package " + affectedPackage.getPackageName() + " - skipping");
            return null;
        }

        final PackageURL purl;
        try {
            purl = new PackageURL(affectedPackage.getPurl());
        } catch (MalformedPackageURLException e) {
            LOGGER.debug("Invalid PURL provided for affected package  " + affectedPackage.getPackageName() + " - skipping", e);
            return null;
        }

        // Other sources do not populate the versionStartIncluding with 0.
        // Semantically, versionStartIncluding=null is equivalent to >=0.
        // Omit zero values here for consistency's sake.
        final String versionStartIncluding = Optional.ofNullable(affectedPackage.getLowerVersionRange())
                .filter(version -> !"0".equals(version))
                .orElse(null);
        final String versionEndExcluding = affectedPackage.getUpperVersionRangeExcluding();
        final String versionEndIncluding = affectedPackage.getUpperVersionRangeIncluding();

        VulnerableSoftware vs = qm.getVulnerableSoftwareByPurl(purl.getType(), purl.getNamespace(), purl.getName(),
                versionEndExcluding, versionEndIncluding, null, versionStartIncluding);
        if (vs != null) {
            return vs;
        }

        vs = new VulnerableSoftware();
        vs.setPurlType(purl.getType());
        vs.setPurlNamespace(purl.getNamespace());
        vs.setPurlName(purl.getName());
        vs.setPurl(purl.canonicalize());
        vs.setVulnerable(true);
        vs.setVersion(affectedPackage.getVersion());
        vs.setVersionStartIncluding(versionStartIncluding);
        vs.setVersionEndExcluding(versionEndExcluding);
        vs.setVersionEndIncluding(versionEndIncluding);
        return vs;
    }

    public Vulnerability mapBomToVulnerability(final QueryManager qm, final Bom bom) {
        org.cyclonedx.model.vulnerability.Vulnerability cycloneVuln = bom.getVulnerabilities().get(0);
        final Vulnerability vuln = new Vulnerability();
        if (cycloneVuln.getId() != null) {
            vuln.setSource(extractSource(cycloneVuln.getId()));
        }
        vuln.setVulnId(String.valueOf(cycloneVuln.getId()));
        vuln.setTitle(cycloneVuln.getDetail());
        vuln.setDescription(cycloneVuln.getDescription());
        vuln.setPublished(Date.from(cycloneVuln.getPublished().toInstant()));
        vuln.setUpdated(Date.from(cycloneVuln.getUpdated().toInstant()));

        if (cycloneVuln.getCredits() != null) {
            vuln.setCredits(String.join(", ", cycloneVuln.getCredits().toString()));
        }

        if (cycloneVuln.getReferences() != null && cycloneVuln.getReferences().size() > 0) {
            final StringBuilder sb = new StringBuilder();
            for (org.cyclonedx.model.vulnerability.Vulnerability.Reference ref : cycloneVuln.getReferences()) {
                sb.append("* [").append(ref).append("](").append(ref).append(")\n");
            }
            vuln.setReferences(sb.toString());
        }

        if (cycloneVuln.getCwes() != null) {
            for (int i = 0; i < cycloneVuln.getCwes().size(); i++) {
                final Cwe cwe = CweResolver.getInstance().resolve(qm, cycloneVuln.getCwes().get(i).toString());
                if (cwe != null) {
                    vuln.addCwe(cwe);
                }
            }
        }
        vuln.setSeverity(calculateOSVSeverity(bom));
        //vuln.setCvssV2Vector(advisory.getCvssV2Vector()); FIXME
        //vuln.setCvssV3Vector(advisory.getCvssV3Vector()); FIXME
        return vuln;
    }

    public Severity calculateOSVSeverity(Bom bom) {

        // derive from database_specific cvss v3 vector if available
        //FIXME
//        if (advisory.getCvssV3Vector() != null) {
//            Cvss cvss = Cvss.fromVector(advisory.getCvssV3Vector());
//            Score score = cvss.calculateScore();
//            return normalizedCvssV3Score(score.getBaseScore());
//        }
//        // derive from database_specific cvss v2 vector if available
//        if (advisory.getCvssV2Vector() != null) {
//            Cvss cvss = Cvss.fromVector(advisory.getCvssV2Vector());
//            Score score = cvss.calculateScore();
//            return normalizedCvssV2Score(score.getBaseScore());
      //  }
        // get database_specific severity string if available
        org.cyclonedx.model.vulnerability.Vulnerability.Rating.Severity severity = bom.getVulnerabilities().get(0).getRatings().get(0).getSeverity();
        if (severity != null) {
            if (severity.getSeverityName().equalsIgnoreCase("CRITICAL")) {
                return Severity.CRITICAL;
            } else if (severity.getSeverityName().equalsIgnoreCase("HIGH")) {
                return Severity.HIGH;
            } else if (severity.getSeverityName().equalsIgnoreCase("MODERATE")) {
                return Severity.MEDIUM;
            } else if (severity.getSeverityName().equalsIgnoreCase("LOW")) {
                return Severity.LOW;
            }
        }
        // get largest ecosystem_specific severity from its affected packages
//        if (advisory.getAffectedPackages() != null) {  FIXME
//            List<Integer> severityLevels = new ArrayList<>();
//            for (OsvAffectedPackage vuln : advisory.getAffectedPackages()) {
//                severityLevels.add(vuln.getSeverity().getLevel());
//            }
//            Collections.sort(severityLevels);
//            Collections.reverse(severityLevels);
//            return getSeverityByLevel(severityLevels.get(0));
//        }
        return Severity.UNASSIGNED;
    }

    public Vulnerability.Source extractSource(String vulnId) {
        final String sourceId = vulnId.split("-")[0];
        return switch (sourceId) {
            case "GHSA" -> Vulnerability.Source.GITHUB;
            case "CVE" -> Vulnerability.Source.NVD;
            default -> Vulnerability.Source.OSV;
        };
    }
}
