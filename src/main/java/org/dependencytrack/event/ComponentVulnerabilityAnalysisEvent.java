package org.dependencytrack.event;

import alpine.event.framework.Event;
import com.github.packageurl.PackageURL;
import org.dependencytrack.model.Component;
import org.dependencytrack.model.VulnerabilityAnalysisLevel;

import java.util.Objects;
import java.util.Optional;
import java.util.UUID;

/**
 * Defines an {@link Event} triggered when requesting a component to be analyzed for vulnerabilities.
 *
 * @param token     The scan token
 * @param uuid      The {@link UUID} of the {@link Component} to scan
 * @param purl      The package URL of the {@link Component} to scan
 * @param cpe       The CPE of the {@link Component} to scan
 * @param swidTagId The SWID tag ID of the {@link Component} to scan
 * @param internal  Whether the {@link Component} is internal
 * @param level     The {@link VulnerabilityAnalysisLevel} of the scan
 */
public record ComponentVulnerabilityAnalysisEvent(UUID token, UUID uuid, String purl, String cpe,
                                                  String swidTagId, Boolean internal,
                                                  VulnerabilityAnalysisLevel level) implements Event {

    public ComponentVulnerabilityAnalysisEvent(final UUID token, final UUID uuid, final String purl, final String cpe,
                                               final String swidTagId, final Boolean internal, final VulnerabilityAnalysisLevel level) {
        this.token = Objects.requireNonNull(token);
        this.uuid = Objects.requireNonNull(uuid);
        this.purl = purl;
        this.cpe = cpe;
        this.swidTagId = swidTagId;
        this.internal = internal;
        this.level = Objects.requireNonNull(level);
    }

    public ComponentVulnerabilityAnalysisEvent(final UUID token, final Component component, VulnerabilityAnalysisLevel level) {
        this(token, component.getUuid(), Optional.ofNullable(component.getPurl()).map(PackageURL::canonicalize).orElse(null),
                component.getCpe(), component.getSwidTagId(), component.isInternal(), level);
    }

}
