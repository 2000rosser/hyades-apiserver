/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.tasks;

import alpine.common.logging.Logger;
import alpine.event.framework.Event;
import alpine.event.framework.Subscriber;
import org.dependencytrack.event.VulnerabilityScanCleanupEvent;
import org.dependencytrack.model.VulnerabilityScan;
import org.dependencytrack.persistence.QueryManager;

import javax.jdo.Query;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;

/**
 * A {@link Subscriber} task that deletes {@link VulnerabilityScan}s from the database
 * that have not been updated for over a day.
 * <p>
 * The purpose of this task is to prevent {@link VulnerabilityScan}s to increase in numbers indefinitely.
 *
 * @since 5.0.0
 */
public class VulnerabilityScanCleanupTask implements Subscriber {

    private static final Logger LOGGER = Logger.getLogger(VulnerabilityScanCleanupTask.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public void inform(final Event event) {
        if (event instanceof VulnerabilityScanCleanupEvent) {
            final Instant threshold = Instant.now().minus(1, ChronoUnit.DAYS);
            LOGGER.info("Cleaning up vulnerability scans that received no update since %s".formatted(threshold));

            try (final var qm = new QueryManager();
                 final Query<?> query = qm.getPersistenceManager().newQuery("""
                         DELETE FROM org.dependencytrack.model.VulnerabilityScan
                         WHERE this.updatedAt < :threshold
                         """)) {
                query.setParameters(Date.from(threshold));
                final long numDeleted = query.executeResultUnique(Long.class);
                LOGGER.info("Deleted %d vulnerability scans".formatted(numDeleted));
            } catch (Exception e) {
                LOGGER.error("Cleaning up vulnerability scans failed", e);
            }
        }
    }

}
