package org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage;

import alpine.common.logging.Logger;
import io.minio.BucketExistsArgs;
import io.minio.GetObjectArgs;
import io.minio.GetObjectResponse;
import io.minio.MinioClient;
import io.minio.StatObjectArgs;
import io.minio.StatObjectResponse;
import io.minio.errors.ErrorResponseException;
import io.minio.errors.InsufficientDataException;
import io.minio.errors.InternalException;
import io.minio.errors.InvalidResponseException;
import io.minio.errors.ServerException;
import io.minio.errors.XmlParserException;
import org.dependencytrack.tasks.vulnerabilitypolicy.AbstractVulnerabilityPolicyFetcher;
import org.dependencytrack.tasks.vulnerabilitypolicy.S3Client;
import org.dependencytrack.util.VulnerabilityPolicyUtil;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.zip.ZipInputStream;

public class S3StorageHandler extends AbstractVulnerabilityPolicyFetcher {
    public static S3Client S3CLIENT = new S3Client();
    private static final Logger LOGGER = Logger.getLogger(S3StorageHandler.class);

    public S3StorageHandler() {

    }

    S3StorageHandler(S3Client s3Client) {
        S3CLIENT = s3Client;
    }

    @Override
    public boolean verifyDownloadNeeded() throws ServerException, InsufficientDataException, ErrorResponseException,
            IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidResponseException, XmlParserException,
            InternalException {
        MinioClient minioClient = S3CLIENT.getMinioClient();

        if (minioClient.bucketExists(BucketExistsArgs.builder().bucket(S3CLIENT.getS3BucketName()).build())) {
            //perform head request check on the object of interest
            StatObjectResponse response = minioClient.statObject(StatObjectArgs.builder().
                    bucket(S3CLIENT.getS3BucketName()).object(S3CLIENT.getFileToFetch()).build());
            return VulnerabilityPolicyUtil.matchWithHashConfigProperty(response.etag());
        } else {
            LOGGER.error("Provided bucket %s not found in the s3 bucket".formatted(S3CLIENT.getS3BucketName()));
            return false;
        }
    }

    @Override
    public ZipInputStream downloadZippedContent() throws IOException, ServerException, InsufficientDataException,
            ErrorResponseException, NoSuchAlgorithmException, InvalidKeyException, InvalidResponseException,
            XmlParserException, InternalException {
        MinioClient minioClient = S3CLIENT.getMinioClient();
        GetObjectResponse response = minioClient.getObject(
                GetObjectArgs.builder().bucket(S3CLIENT.getS3BucketName()).object(S3CLIENT.getFileToFetch()).build());
        return new ZipInputStream(new ByteArrayInputStream(response.readAllBytes()));
    }

}
