package org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage;

import alpine.Config;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpHead;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.CloseableHttpClient;
import org.dependencytrack.common.ConfigKey;
import org.dependencytrack.common.HttpClientPool;
import org.dependencytrack.util.HttpUtil;
import org.dependencytrack.util.VulnerabilityPolicyUtil;

import java.io.IOException;
import java.util.Arrays;
import java.util.Optional;
import java.util.zip.ZipInputStream;

public class NginxStorageHandler implements BlobStorageAccessHandler {

    protected String username;
    protected String password;
    protected String bearerToken;
    protected final CloseableHttpClient httpClient = HttpClientPool.getClient();

    void setUsername() {
        if (Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_BUNDLE_AUTH_USERNAME) != null) {
            this.username = Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_BUNDLE_AUTH_USERNAME);
        }
    }

    void setPassword() {
        if (Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_BUNDLE_AUTH_PASSWORD) != null) {
            this.password = Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_BUNDLE_AUTH_PASSWORD);
        }
    }

    void setBearerToken() {
        if (Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_BUNDLE_AUTH_BEARER_TOKEN) != null) {
            this.bearerToken = Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_BUNDLE_AUTH_BEARER_TOKEN);
        }
    }

    public NginxStorageHandler() {
        setUsername();
        setPassword();
        setBearerToken();
    }

    CloseableHttpResponse performHeadRequest() throws IOException {
        HttpUriRequest request = new HttpHead(Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_BUNDLE_URL));
        request.addHeader("Authorization", getHeader(username, password, bearerToken));
        return httpClient.execute(request);
    }

    public String getHeader(String username, String password, String bearerToken) {
        if (username != null && !(username.trim().equals(""))) {
            return HttpUtil.basicAuthHeaderValue(username, password);
        } else if (bearerToken != null && !(bearerToken.trim().equals(""))) {
            return "Bearer " + bearerToken;
        }
        return null;
    }

    CloseableHttpResponse performGetRequest() throws IOException {
        HttpUriRequest request = new HttpGet(Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_BUNDLE_URL));
        request.addHeader("Authorization", getHeader(username, password, bearerToken));
        return httpClient.execute(request);
    }

    @Override
    public boolean verifyDownloadNeeded() throws IOException {
        try (CloseableHttpResponse response = performHeadRequest()) {
            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                //there is a possiblility that etag header is not present in the response from policy bundle server
                //when etag header not found, we still want to update the lastmodified hash as null
                Header[] httpHeaders = response.getAllHeaders();
                Optional<Header> headerOptional = Arrays.stream(httpHeaders).filter(header -> header.getName().equalsIgnoreCase("ETag")).findFirst();
                return headerOptional.map(header -> VulnerabilityPolicyUtil.matchWithHashConfigProperty(header.getValue())).orElseGet(() -> VulnerabilityPolicyUtil.matchWithHashConfigProperty(null));
            } else {
                throw new IOException(("Unable to get response from resource bundle endpoint for policy." +
                        " Response code received: %s. Response messge: %s").
                        formatted(response.getStatusLine().getStatusCode(), response.getStatusLine().getReasonPhrase()));

            }
        }
    }

    @Override
    public ZipInputStream downloadZippedContent() throws IOException {
        try (CloseableHttpResponse response = performGetRequest()) {
            HttpEntity entity = response.getEntity();
            return new ZipInputStream(entity.getContent());
        }
    }
}
