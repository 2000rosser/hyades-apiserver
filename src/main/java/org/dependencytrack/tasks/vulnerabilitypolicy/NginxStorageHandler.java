package org.dependencytrack.tasks.vulnerabilitypolicy;

import alpine.common.logging.Logger;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.CloseableHttpResponse;

import java.io.IOException;
import java.util.Arrays;
import java.util.Optional;
import java.util.zip.ZipInputStream;

public class NginxStorageHandler extends AbstractVulnerabilityPolicyFetcher {

    private static final Logger LOGGER = Logger.getLogger(NginxStorageHandler.class);

    public NginxStorageHandler() {
        super.setUsername();
        super.setPassword();
    }

    @Override
    public boolean verifyDownloadNeeded() throws IOException {
        try (CloseableHttpResponse response = performHeadRequest()) {
            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                Header[] httpHeaders = response.getAllHeaders();
                Optional<Header> headerOptional = Arrays.stream(httpHeaders).filter(header -> header.getName().equalsIgnoreCase("ETag")).findFirst();
                if (headerOptional.isPresent()) {
                    return matchWithHashConfigProperty(headerOptional.get().getValue());
                } else {
                    LOGGER.warn("Was not able to find Etag header in the nginx request. Will proceed assuming that file needs to be downloaded");
                    return true;
                }
            } else {
                throw new IOException("Unable to get response from resource bundle endpoint for policy");

            }
        }
    }

    @Override
    public ZipInputStream downloadZippedContent() throws IOException {
        CloseableHttpResponse response = performGetRequest();
        HttpEntity entity = response.getEntity();
        return new ZipInputStream(entity.getContent());
    }

}
