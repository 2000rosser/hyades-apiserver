package org.dependencytrack.tasks.vulnerabilitypolicy;


import alpine.model.ConfigProperty;
import io.minio.errors.ErrorResponseException;
import io.minio.errors.InsufficientDataException;
import io.minio.errors.InternalException;
import io.minio.errors.InvalidResponseException;
import io.minio.errors.ServerException;
import io.minio.errors.XmlParserException;
import org.dependencytrack.model.ConfigPropertyConstants;
import org.dependencytrack.model.VulnerabilityPolicy;
import org.dependencytrack.persistence.QueryManager;
import org.projectnessie.cel.tools.ScriptCreateException;
import org.projectnessie.cel.tools.ScriptException;

import java.io.BufferedReader;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import java.util.zip.ZipInputStream;

public interface BlobStorageAccessHandler {

    boolean verifyDownloadNeeded() throws ServerException, InsufficientDataException, ErrorResponseException, IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidResponseException, XmlParserException, InternalException;

    ZipInputStream downloadZippedContent() throws IOException, ServerException, InsufficientDataException, ErrorResponseException, NoSuchAlgorithmException, InvalidKeyException, InvalidResponseException, XmlParserException, InternalException;

    void parseAndSavePolicies(ZipInputStream inputStream) throws ScriptCreateException, IOException;

    void parseVulnerabilityPolicy(StringBuilder out, List<VulnerabilityPolicy> createVulnerabilityPolicyList,
                                     List<VulnerabilityPolicy> updateVulnerabilityPolicyList, List<String> policyNames) throws ScriptException, IOException;


    void saveParsedVulnerabilities(QueryManager queryManager, List<VulnerabilityPolicy> createVulnerabilityPolicyList,
                                   List<VulnerabilityPolicy> updateVulnerabilityPolicyList,
                                   List<String> policyNames);

    default boolean matchWithHashConfigProperty(String etag){
        try (QueryManager queryManager = new QueryManager()) {
            ConfigProperty lastModifiedHash = queryManager.getConfigProperty(ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getGroupName(),
                    ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyName());
            if (lastModifiedHash == null) {
                //lastmodified hash property is currently not in the db
                queryManager.createConfigProperty(ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getGroupName(),
                        ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyName(),
                        etag,
                        ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getPropertyType(),
                        ConfigPropertyConstants.VULNERABILITY_POLICY_FILE_LAST_MODIFIED_HASH.getDescription());
                return true;
            } else if (lastModifiedHash.getPropertyValue() == null ||
                    !(etag.equals(lastModifiedHash.getPropertyValue()))) {
                //lastmodifiedhash value is either null or different from incoming value
                lastModifiedHash.setPropertyValue(etag);
                return true;
            }
            //the lastmodified hash is the same as the incoming value
            return false;
        }
    }
}
