package org.dependencytrack.tasks.vulnerabilitypolicy;

import alpine.common.logging.Logger;
import io.minio.BucketExistsArgs;
import io.minio.MinioClient;
import io.minio.StatObjectArgs;
import io.minio.StatObjectResponse;
import io.minio.errors.ErrorResponseException;
import io.minio.errors.InsufficientDataException;
import io.minio.errors.InternalException;
import io.minio.errors.InvalidResponseException;
import io.minio.errors.ServerException;
import io.minio.errors.XmlParserException;

import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.zip.ZipInputStream;

public class S3StorageHandler extends AbstractVulnerabilityPolicyFetcher {
    private final S3Client s3Client;
    private static final Logger LOGGER = Logger.getLogger(S3StorageHandler.class);

    public S3StorageHandler(S3Client s3Client) {
        this.s3Client = s3Client;
    }

    @Override
    public boolean verifyDownloadNeeded() throws ServerException, InsufficientDataException, ErrorResponseException,
            IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidResponseException, XmlParserException,
            InternalException {
        MinioClient minioClient = s3Client.getMinioClient();

        if (minioClient.bucketExists(BucketExistsArgs.builder().bucket(s3Client.getS3BucketName()).build())) {
            //perform head request check on the object of interest
            StatObjectResponse response = minioClient.statObject(StatObjectArgs.builder().
                    bucket(s3Client.getS3BucketName()).object(s3Client.getFileToFetch()).build());
            return matchWithHashConfigProperty(response.etag());
        } else {
            LOGGER.error("Provided bucket %s not found in the s3 bucket".formatted(s3Client.getS3BucketName()));
            return false;
        }
    }

    @Override
    public ZipInputStream downloadZippedContent() throws IOException {
        return null;
    }

}
