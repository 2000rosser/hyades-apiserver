package org.dependencytrack.tasks.vulnerabilitypolicy;

import alpine.Config;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpHead;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.CloseableHttpClient;
import org.dependencytrack.common.ConfigKey;
import org.dependencytrack.common.HttpClientPool;
import org.dependencytrack.tasks.vulnerabilitypolicy.blobstorage.BlobStorageAccessHandler;
import org.dependencytrack.util.HttpUtil;

import java.io.IOException;

public abstract class AbstractVulnerabilityPolicyFetcher implements BlobStorageAccessHandler {

    protected String username;
    protected String password;
    protected final CloseableHttpClient httpClient = HttpClientPool.getClient();

    public void setUsername() {
        if (Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_FILE_FETCH_USERNAME) != null) {
            username = Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_FILE_FETCH_USERNAME);
        }
    }

    public void setPassword() {
        if (Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_FILE_FETCH_PASSWORD) != null) {
            password = Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_FILE_FETCH_PASSWORD);
        }
    }


    public CloseableHttpResponse performHeadRequest() throws IOException {
        HttpUriRequest request = new HttpHead(Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_FETCH_URL));
        if (username != null || password != null) {
            request.addHeader("Authorization", HttpUtil.basicAuthHeaderValue(username, password));
        }
        return httpClient.execute(request);
    }

    public CloseableHttpResponse performGetRequest() throws IOException {
        HttpUriRequest request = new HttpGet(Config.getInstance().getProperty(ConfigKey.VULNERABILITY_POLICY_FETCH_URL));
        if (username != null || password != null) {
            request.addHeader("Authorization", HttpUtil.basicAuthHeaderValue(username, password));
        }
        return httpClient.execute(request);
    }

}
